{"version":3,"sources":["Flashcard.js","Flashcardlist.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","className","onClick","question","options","map","option","answer","Flashcardlist","flashcards","id","App","setFlashcards","categories","setCategories","categoryEl","useRef","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","useEffect","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","current","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","Math","random","htmlFor","ref","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"gMAEe,SAASA,EAAT,GAAmC,IAAdC,EAAa,EAAbA,UAAa,EACvBC,oBAAS,GADc,mBACxCC,EADwC,KAClCC,EADkC,KAG/C,OACE,sBACEC,UAAS,eAAUF,EAAO,OAAS,IACnCG,QAAS,kBAAMF,GAASD,IAF1B,UAGE,sBAAKE,UAAU,QAAf,UACGJ,EAAUM,SACX,qBAAKF,UAAU,oBAAf,SACGJ,EAAUO,QAAQC,KAAI,SAACC,GACtB,OACE,qBAAKL,UAAU,mBAAf,SACGK,GADoCA,WAO/C,qBAAKL,UAAU,OAAf,SAAuBJ,EAAUU,YClBhC,IAAMC,EAAgB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC9B,OACE,qBAAKR,UAAU,YAAf,SACGQ,EAAWJ,KAAI,SAACR,GACf,OAAO,cAACD,EAAD,CAAWC,UAAWA,GAAgBA,EAAUa,U,wBCsFhDC,MAxFf,WAAgB,IAAD,EACuBb,mBAAS,IADhC,mBACNW,EADM,KACMG,EADN,OAEuBd,mBAAS,IAFhC,mBAENe,EAFM,KAEMC,EAFN,KAIPC,EAAaC,mBACbC,EAAWD,mBAUjB,SAASE,EAAaC,GACpB,IAAMC,EAAWC,SAASC,cAAc,YAExC,OADAF,EAASG,UAAYJ,EACdC,EAASI,MA+BlB,OA1CAC,qBAAU,WACRC,IAAMC,IAAI,wCAAwCC,MAAK,SAACC,GACtDf,EAAce,EAAIC,KAAKC,wBAExB,IAEHN,qBAAU,cAAU,IAqClB,qCACE,uBAAMxB,UAAU,SAAS+B,SA9B7B,SAAsBC,GACpBA,EAAEC,iBACFR,IACGC,IAAI,8BAA+B,CAClCQ,OAAQ,CACNC,OAAQnB,EAASoB,QAAQb,MACzBc,SAAUvB,EAAWsB,QAAQb,SAGhCI,MAAK,SAACC,GACLjB,EACEiB,EAAIC,KAAKS,QAAQlC,KAAI,SAACmC,EAAcC,GAClC,IAAMlC,EAASW,EAAasB,EAAaE,gBACnCtC,EAAO,sBACRoC,EAAaG,kBAAkBtC,KAAI,SAACuC,GAAD,OAAO1B,EAAa0B,OAD/C,CAEXrC,IAEF,MAAO,CACLG,GAAG,GAAD,OAAK+B,EAAL,YAAcI,KAAKC,OACrB3C,SAAUe,EAAasB,EAAarC,UACpCI,OAAQA,EACRH,QAASA,EAAQ2C,MAAK,kBAAMC,KAAKC,SAAW,eASpD,UACE,sBAAKhD,UAAU,aAAf,UACE,uBAAOiD,QAAQ,WAAf,sBACA,wBAAQxC,GAAG,WAAWyC,IAAKpC,EAA3B,SACGF,EAAWR,KAAI,SAACiC,GACf,OACE,wBACAd,MAAOc,EAAS5B,GADhB,SAGG4B,EAASc,MADPd,EAAS5B,YAOtB,sBAAKT,UAAU,aAAf,UACE,uBAAOiD,QAAQ,UAAf,iCACA,uBACEG,KAAK,SACL3C,GAAG,SACH4C,IAAI,IACJC,KAAK,IACLC,aAAc,GACdL,IAAKlC,OAGT,qBAAKhB,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,2BAGJ,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAAeQ,WAAYA,UCnFnCgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASuC,eAAe,W","file":"static/js/main.a95948a9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function Flashcard({ flashcard }) {\n  const [flip, setFlip] = useState(false);\n\n  return (\n    <div\n      className={`card ${flip ? 'flip' : ''}`}\n      onClick={() => setFlip(!flip)}>\n      <div className=\"front\">\n        {flashcard.question}\n        <div className=\"flashcard-options\">\n          {flashcard.options.map((option) => {\n            return (\n              <div className=\"flashcard-option\" key={option}>\n                {option}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"back\">{flashcard.answer}</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Flashcard from './Flashcard';\n\nexport const Flashcardlist = ({ flashcards }) => {\n  return (\n    <div className=\"card-grid\">\n      {flashcards.map((flashcard) => {\n        return <Flashcard flashcard={flashcard} key={flashcard.id} />\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Flashcardlist } from './Flashcardlist';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [categories, setCategories] = useState([]);\n\n  const categoryEl = useRef();\n  const amountEl = useRef();\n\n  useEffect(() => {\n    axios.get('https://opentdb.com/api_category.php').then((res) => {\n      setCategories(res.data.trivia_categories);\n    });\n  }, []);\n\n  useEffect(() => {}, []);\n\n  function decodeString(str) {\n    const textArea = document.createElement('textarea');\n    textArea.innerHTML = str;\n    return textArea.value;\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    axios\n      .get('https://opentdb.com/api.php', {\n        params: {\n          amount: amountEl.current.value,\n          category: categoryEl.current.value,\n        },\n      })\n      .then((res) => {\n        setFlashcards(\n          res.data.results.map((questionItem, index) => {\n            const answer = decodeString(questionItem.correct_answer);\n            const options = [\n              ...questionItem.incorrect_answers.map((a) => decodeString(a)),\n              answer,\n            ];\n            return {\n              id: `${index}-${Date.now()}`,\n              question: decodeString(questionItem.question),\n              answer: answer,\n              options: options.sort(() => Math.random() - 0.5),\n            };\n          })\n        );\n      });\n  }\n\n  return (\n    <>\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select id=\"category\" ref={categoryEl}>\n            {categories.map((category) => {\n              return (\n                <option \n                value={category.id} \n                key={category.id}>\n                  {category.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"acmount\">Number of Questions</label>\n          <input\n            type=\"number\"\n            id=\"amount\"\n            min=\"1\"\n            step=\"1\"\n            defaultValue={10}\n            ref={amountEl}\n          />\n        </div>\n        <div className=\"form-group\">\n          <button className=\"glow-on-hover\">Generate</button>\n        </div>\n      </form>\n      <div className=\"container\">\n        <Flashcardlist flashcards={flashcards} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}